name: Docker CI/CD with Rolling Update

on:
  pull_request:
    branches:
      - 'release'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: [self-hosted, supa]
    environment: supa
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.12.2'

      - name: Install dependencies
        run: npm ci

#      - name: Run tests
#        run: npm test

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/app/app.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, supa]
    environment: supa

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update docker-compose.yaml
        run: |
          sed -i 's|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|' docker-compose.pro.yaml

      - name: Deploy with rolling update
        env:
          DOTENV_KEY: ${{ secrets.DOTENV_KEY }}
        run: |
          # Pull the new image
          docker compose -f docker-compose.pro.yaml pull
          
          # Get the number of running containers
          CONTAINER_COUNT=$(docker-compose -f docker-compose.pro.yaml ps -q | wc -l)
          
          # Perform rolling update
          for i in $(seq 1 $CONTAINER_COUNT)
          do
            # Scale up by 1
            docker compose -f docker-compose.pro.yaml up -d --scale app=$((CONTAINER_COUNT + 1)) --no-recreate
          
            # Wait for the new container to be healthy (adjust the timeout as needed)
            timeout 300s bash -c 'until docker compose -f docker-compose.pro.yaml ps | grep "app.*Up.*healthy"; do sleep 5; done'
          
            # Scale down by 1
            docker compose -f docker-compose.pro.yaml up -d --scale app=$CONTAINER_COUNT --no-recreate
          
            # Remove the old container
            docker compose -f docker-compose.pro.yaml rm -fsv $(docker-compose -f docker-compose.pro.yaml ps -q | head -n1)
          done

      - name: Cleanup old images
        run: docker image prune -af