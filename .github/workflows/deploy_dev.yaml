name: Deploy to dev
on:
  push:
    branches:
      - dev
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
#  notification_start:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Notify start action
#        uses: rjstone/discord-webhook-notify@v1
#        with:
#          severity: info
#          color: '#0059ff'
#          details: New push to repository click2eat-panel on environment DEV
#          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
  test:
    timeout-minutes: 5
#    needs:
#      - notification_start
    name: Run tests
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: false
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}
          cache: 'pnpm'
      - run: pnpm i
#      - name: Install Playwright Browsers
#        run: npx playwright install --with-deps
      - name: Setup .env file
        run: pnpm dlx dotenv-vault local decrypt ${{secrets.DOTENV_KEY}} > .env
      #      - name: Run Playwright tests
      #        run: npx playwright test
      - name: Build
        run: pnpm run build
#      - name: Build failed
#        uses: rjstone/discord-webhook-notify@v1
#        if: failure()
#        with:
#          severity: error
#          details: Â¡Han fallando los tests! Se cancela el despliegue
#          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
#      - uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: playwright-report
#          path: test-results/
#          retention-days: 30
#  build-docker:
#    runs-on: [self-hosted, dev]
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Build Docker image
#        env:
#          DOTENV_KEY: ${{ secrets.DOTENV_KEY }}
#          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
#        run: |
#          docker compose -f docker-compose.pro.yaml pull
#          docker compose -f docker-compose.pro.yaml build --build-arg DOTENV_KEY=${DOTENV_KEY}
#  deploy:
#    runs-on: [self-hosted, dev]
#    environment: dev
#    needs: [test, build-docker]
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Deploy containers with rolling update
#        run: |
#          docker compose -f docker-compose.pro.yaml up -d --no-deps
#        env:
#          DOTENV_KEY: ${{ secrets.DOTENV_KEY }}
#          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
#          APP_DNS_DOMAIN: ${{ secrets.APP_DNS_DOMAIN }}
#          APP_TLS_MAIL: ${{ secrets.APP_TLS_MAIL }}
#
#      - name: Prune unused Docker images
#        run: docker image prune -f